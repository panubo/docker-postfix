#!/usr/bin/env bash

set -e

[ "$DEBUG" == 'true' ] && set -x

# Defaults
: "${SIZELIMIT:=15728640}"  # 10Meg with headroom
: "${RELAYHOST:=}" # empty
: "${LOGOUTPUT:=/dev/stdout}"

# TLS
: "${USE_TLS:=yes}"
: "${TLS_SECURITY_LEVEL:=may}"
: "${TLS_KEY:=/etc/ssl/private/ssl-cert-snakeoil.key}"
: "${TLS_CRT:=/etc/ssl/certs/ssl-cert-snakeoil.pem}"
: "${TLS_CA:=}"
: "${CLIENT_TLS_SECURITY_LEVEL:=may}"
: "${CLIENT_TLS_KEY:=/etc/ssl/private/ssl-cert-snakeoil.key}"
: "${CLIENT_TLS_CRT:=/etc/ssl/certs/ssl-cert-snakeoil.pem}"

# General
: "${POSTFIX_ADD_MISSING_HEADERS:=no}"
: "${INET_PROTOCOLS:=all}"
: "${DISABLE_VRFY_COMMAND:=yes}"

# Fix issue with dpkg-reconfigure and locales not installed "perl: warning: Setting locale failed."
unset LANG

cd /etc/postfix

# Copy default spool from cache
if [ ! "$(ls -A /var/spool/postfix)" ]; then
   cp -a /var/spool/postfix.cache/* /var/spool/postfix/
else
  # Fix spool directory permissions
  chgrp -R postdrop /var/spool/postfix/public
  chgrp -R postdrop /var/spool/postfix/maildrop
  postfix set-permissions
fi

# DKIM
if [ "${USE_DKIM}" == "yes" ]; then
    # TODO s6-svwait for dkim
    echo "postfix >> Enabling dkim milter"
    postconf -e milter_protocol="6"
    postconf -e milter_default_action="accept"
    postconf -e smtpd_milters="inet:localhost:8891"
    postconf -e non_smtpd_milters="inet:localhost:8891"
fi

echo "postfix >> Setting smtpd_use_tls to ${USE_TLS}"
postconf -e smtpd_use_tls="${USE_TLS}"

if [ "${USE_TLS}" == "yes" ]; then
    if [ "${TLS_KEY}" == "/etc/ssl/private/ssl-cert-snakeoil.key" ] || [ "${CLIENT_TLS_KEY}" == "/etc/ssl/private/ssl-cert-snakeoil.key" ]; then
        echo "postfix >> Generating snakeoil SSL cert"
        dpkg-reconfigure -f noninteractive ssl-cert
    fi
    echo "postfix >> Setting smtp_tls parameters"
    # setting smtpd_tls_security_level implies smtp_use_tls="yes"
    postconf -e smtp_tls_security_level="${CLIENT_TLS_SECURITY_LEVEL}"
    postconf -e smtp_tls_key_file="${CLIENT_TLS_KEY}"
    postconf -e smtp_tls_cert_file="${CLIENT_TLS_CRT}"
    postconf -e smtp_tls_CAfile="${CLIENT_TLS_CA}"
    postconf -e smtp_tls_CApath="/etc/ssl/certs"
    postconf -e smtp_tls_loglevel="1"
    echo "postfix >> Setting smtpd_tls parameters"
    # setting smtpd_tls_security_level implies smtpd_use_tls="yes"
    postconf -e smtpd_tls_security_level="${TLS_SECURITY_LEVEL}"
    postconf -e smtpd_tls_key_file="${TLS_KEY}"
    postconf -e smtpd_tls_cert_file="${TLS_CRT}"
    postconf -e smtpd_tls_CAfile="${TLS_CA}"
    postconf -e smtpd_tls_CApath="/etc/ssl/certs"
fi

# Configure Postfix General parameters
echo "postfix >> Setting mailname to ${MAILNAME}"
postconf -e myorigin="${MAILNAME}"
postconf -e myhostname="${MAILNAME}"
postconf -e mydestination="${MAILNAME}"

echo "postfix >> Setting mynetworks to ${MYNETWORKS}"
postconf -e mynetworks="${MYNETWORKS}"

echo "postfix >> Setting message_size_limit to ${SIZELIMIT}"
postconf -e message_size_limit="${SIZELIMIT}"

if [ -n "${RELAYHOST}" ]; then
  echo "postfix >> Setting relayhost to ${RELAYHOST}"
  postconf -e relayhost="${RELAYHOST}"
fi

if [ "${RELAYHOST_AUTH}" == "yes" ]; then
    echo "postfix >> Enabling relayhost authentication"
    touch /etc/postfix/sasl-passwords
    postconf -e smtp_sasl_auth_enable=yes
    postconf -e smtp_sasl_security_options=noanonymous
    postconf -e smtp_sasl_password_maps=hash:/etc/postfix/sasl-passwords
    # require encryption with relayhost auth
    postconf -e smtp_use_tls=yes
    postconf -e smtp_tls_security_level=encrypt
    postconf -e smtp_sasl_mechanism_filter="PLAIN LOGIN"
fi

if [ "${SENDER_DEPENDENT_RELAYHOST_AUTH}" == "yes" ]; then
    echo "postfix >> Enabling sender dependent relayhost authentication"
    touch /etc/postfix/relayhost-map
    touch /etc/postfix/sasl-passwords
    # postconf -# relayhost
    postconf -e smtp_sasl_auth_enable=yes
    postconf -e smtp_sasl_security_options=noanonymous
    postconf -e smtp_sasl_password_maps=hash:/etc/postfix/sasl-passwords
    postconf -e smtp_sender_dependent_authentication=yes
    postconf -e sender_dependent_relayhost_maps=hash:/etc/postfix/relayhost-map
    # require encryption with relayhost auth
    postconf -e smtp_use_tls=yes
    postconf -e smtp_tls_security_level=encrypt
    postconf -e smtp_sasl_mechanism_filter="PLAIN LOGIN"
fi

if [ -n "${RELAYHOST_PASSWORDMAP}" ]; then
    echo "postfix >> Generating relayhost password map"
    truncate --size 0 /etc/postfix/sasl-passwords
    IFS=',' read -r -a PASSWORDMAP <<< "${RELAYHOST_PASSWORDMAP}"
    for P in "${PASSWORDMAP[@]}"; do
        IFS=':' read -ra MAP <<< "$P"
        if [[ "${#MAP[@]}" -eq 3 ]]; then
          HOST=${MAP[0]}
          USER=${MAP[1]}
          PASS=${MAP[2]}
        elif [[ "${#MAP[@]}" -eq 4 ]]; then
          HOST="${MAP[0]}:${MAP[1]}"
          USER=${MAP[2]}
          PASS=${MAP[3]}
        else
          echo "Bad password map"
          exit 1
        fi
        echo "postfix >> Adding user ${HOST} with user: ${USER}."
        echo "${HOST} ${USER}:${PASS}" >> /etc/postfix/sasl-passwords
    done
    postmap hash:/etc/postfix/sasl-passwords
fi

if [ -n "${RELAYHOST_MAP}" ]; then
    echo "postfix >> Generating relayhost map"
    truncate --size 0 /etc/postfix/relayhost-map
    IFS=',' read -r -a RELAYHOSTMAP <<< "${RELAYHOST_MAP}"
    for P in "${RELAYHOSTMAP[@]}"; do
        IFS=':' read -ra MAP <<< "$P"
        if [[ "${#MAP[@]}" -eq 3 ]]; then
          FROM=${MAP[0]}
          HOST=${MAP[1]}
          PORT=${MAP[2]}
        else
          echo "Bad relayhost map"
          exit 1
        fi
        echo "postfix >> Adding from ${FROM} with smtp: ${HOST}:${PORT}."
        echo "${FROM} ${HOST}:${PORT}" >> /etc/postfix/relayhost-map
    done
    postmap hash:/etc/postfix/relayhost-map
fi

echo "postfix >> Setting always_add_missing_headers to ${POSTFIX_ADD_MISSING_HEADERS}"
postconf -e always_add_missing_headers="${POSTFIX_ADD_MISSING_HEADERS}"

echo "postfix >> Setting inet_protocols to ${INET_PROTOCOLS}"
postconf -e inet_protocols="${INET_PROTOCOLS}"

echo "postfix >> Setting disable_vrfy_command to ${DISABLE_VRFY_COMMAND}"
postconf -e disable_vrfy_command="${DISABLE_VRFY_COMMAND}"

if [[ "${HEADER_CHECKS}" == "true" ]]; then
  echo "postfix >> Setting header_checks"
  postconf -e smtp_header_checks="regexp:/etc/postfix/header_checks"
fi

if [ -n "${BOUNCE_ADDRESS}" ]; then
  echo "postfix >> Setting bounce address to ${BOUNCE_ADDRESS}"
  postconf -e notify_classes="bounce"
  postconf -e bounce_notice_recipient="${BOUNCE_ADDRESS}"
fi

# Common rate limiting
if [ ! -z "${SMTP_DESTINATION_CONCURRENCY_LIMIT}" ]; then
  echo "postfix >> Setting smtp_destination_concurrency_limit"
  postconf -e smtp_destination_concurrency_limit="${SMTP_DESTINATION_CONCURRENCY_LIMIT}"
fi

if [ ! -z "${SMTP_DESTINATION_RATE_DELAY}" ]; then
  echo "postfix >> Setting smtp_destination_rate_delay"
  postconf -e smtp_destination_rate_delay="${SMTP_DESTINATION_RATE_DELAY}"
fi

if [ ! -z "${SMTP_EXTRA_RECIPIENT_LIMIT}" ]; then
  echo "postfix >> Setting smtp_extra_recipient_limit"
  postconf -e smtp_extra_recipient_limit="${SMTP_EXTRA_RECIPIENT_LIMIT}"
fi

# Client Authentication (SASL)
if [ ! -z "${SMTPD_USERS}" ]; then
  echo "postfix >> Setting smtpd sasl auth"
  postconf -e smtpd_sasl_auth_enable="yes"
  postconf -e broken_sasl_auth_clients="yes"
  postconf -e smtpd_sasl_local_domain='$myhostname'
  printf "%s\n" \
    "pwcheck_method: auxprop" \
    "auxprop_plugin: sasldb" \
    "mech_list: PLAIN LOGIN CRAM-MD5 DIGEST-MD5 NTLM" \
  > /etc/postfix/sasl/smtpd.conf
  while IFS=':' read -r user password; do
    echo "postfix >> Adding user SASL user: ${user}"
    echo "${password}" | saslpasswd2 -p -c -u "${MAILNAME}" "${user}"
  done < <(echo "${SMTPD_USERS}" | tr ',' '\n')
  echo "smtp >> Info: \"saslpasswd2: error deleting entry from sasldb: BDB0073 DB_NOTFOUND: No matching key/data pair found\" can be ignored see https://github.com/cyrusimap/cyrus-sasl/issues/264"
  chown postfix:sasl /etc/sasldb2
  # /etc/sasldb2 needs to be in the postfix chroot, this is a bit of a hack
  sed -i -E 's/etc\/host\.conf etc\/nsswitch\.conf etc\/nss_mdns\.config"/etc\/host.conf etc\/nsswitch.conf etc\/nss_mdns.config etc\/sasldb2"/' /usr/lib/postfix/configure-instance.sh
fi

# Configure logging
echo "postfix >> Setting maillog_file to ${LOGOUTPUT}"
postconf -e maillog_file="${LOGOUTPUT}"

# Configure advanced settings
if [ -n "${POSTCONF}" ]; then
  echo "postfix >> Configuring additional postfix parameters"
  # Note: Used ; as IFS since comma is common in postfix options
  IFS=';' read -ra CONFIG <<< "${POSTCONF}"
  for C in "${CONFIG[@]}"; do
      IFS='=' read -ra MAP <<< "$C"
      echo "postfix >> Setting parameter ${MAP[0]} to ${MAP[1]}"
      postconf -e "$C"
  done
fi

# Cleanup stale pids incase we hadn't exited cleanly
rm -f /var/spool/postfix/pid/*

# configure instance (populate etc)
/usr/lib/postfix/configure-instance.sh

# check postfix is happy (also will fix some things)
echo "postfix >> Checking Postfix Configuration"
postfix check

echo "postfix >> Starting postfix"
exec /usr/sbin/postfix start-fg
